@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div>
    <div class="row">
        <div class="col">
            <input type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>
        </div>
    </div>
</div>

<div class="row hidden-md-up">
    @{
        var productList = ProductService.GetAllData();
        productList = productList.OrderBy(m => m.Title);

        // If filter is enabled, reduce the data set to the filter string
        if (FilterData)
        {
            productList = productList.Where(m => m.Title.Contains(FilterDataString));
        }

        if (productList.Any())
        {
            @foreach (var product in productList)
            {
                <div class="col-md-4 halloween-card">
                    <div class="card">
                        <div class="flip-card">
                            <div class="flip-card-inner">
                                <img class="card-img-top flip-card-front" src="@product.Image" style="width:345px;height:365px;">
                                <div class="card-img-top flip-card-back" style="width:345px;height:365px;">
                                    <p>@product.Title</p>
                                    <p>@product.Description</p>
                                    <p>"Quantity Available @product.Quantity</p>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@product.Title</h5>
                        </div>
                        <div class="card-footer">
                            <small class="text-muted">
                                <button @onclick="(e => SelectProduct(product.Id))" id="moreInfo_@product.Id"
                                    data-toggle="modal" data-target="#productModal" class="btn btn-yellow btn-warning">
                                    More Info
                                </button>
                                <button @onclick="(e => ShowPurchaseModal(product.Id))" id="purchase_@product.Id"
                                    data-toggle="modal" data-target="#purchaseModal" class="btn btn-yellow btn-warning">
                                    Purchase 
                                </button>
                            </small>
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@if (selectedProduct == null)
{
    selectedProduct = ProductService.GetAllData().First();
}

<!-- Product Details Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card">
                    <div class="card-img" style="background-image: url('@selectedProduct.Image');"></div>
                    <div class="card-body">
                        <p class="card-text">@selectedProduct.Description</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <!-- Rating and comments section -->
            </div>
        </div>
    </div>
</div>

<!-- Purchase Modal -->
<div class="modal fade" id="purchaseModal" tabindex="-1" role="dialog" aria-labelledby="purchaseTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="purchaseTitle">@selectedProduct.Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card">
                    <img class="card-img-top" src="@selectedProduct.Image" style="width:100%; height:auto;">
                    <div class="card-body">
                        <p>Quantity Available: @selectedProduct.Quantity</p>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <button class="btn btn-outline-secondary" type="button" @onclick="DecreaseQuantity">-</button>
                            </div>
                            <input type="text" class="form-control" value="@SelectedProductQuantity" readonly />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="IncreaseQuantity">+</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Add to Cart</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code 
{
    ProductModel selectedProduct;
    string selectedProductId;
    string FilterDataString = "";
    bool FilterData = false;
    int SelectedProductQuantity = 1;

    void SelectProduct(string productId)
    {
      selectedProductId = productId;
      selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
      GetCurrentRating();
    }

    void ShowPurchaseModal(string productId)
    {
        SelectProduct(productId);
        SelectedProductQuantity = 1; // Initialize the quantity
    }

    void IncreaseQuantity()
    {
        if (SelectedProductQuantity < selectedProduct.Quantity)
        {
            SelectedProductQuantity++;
        }
    }

    void DecreaseQuantity()
    {
        if (SelectedProductQuantity > 1)
        {
            SelectedProductQuantity--;
        }
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
      if(selectedProduct.Ratings == null)
      {
        currentRating = 0;
        voteCount = 0;
      }
      else
      {
        voteCount = selectedProduct.Ratings.Count();
        voteLabel = voteCount > 1 ? "Votes" : "Vote";
        currentRating = selectedProduct.Ratings.Sum() / voteCount;
      }

      System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    // New Comment Flag to show the input box or not
    bool NewComment = false;

    // Next Comment Text is what the comment text is
    string NewCommentText = "";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    void ShowNewCommentInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewComment = true;
    }

    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    void UpdateCommentText(string newCommentText)
    {
        NewCommentText = newCommentText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    void AddComment()
    {
        // Refactor to be a call to the middle tier
        // ProductService.AddCommentToProduct(selectedProduct, comment);

        // Add it to the Comment List
        selectedProduct.CommentList.Add(new CommentModel() { Comment = NewCommentText });

        // Call for the Product to be saved
        ProductService.UpdateData(selectedProduct);

        // Set the NewComment flag to false to hide the input box
        NewComment = false;
    }

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
    }

    void SubmitRating(int rating)
    {
      System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
      ProductService.AddRating(selectedProductId, rating);
      SelectProduct(selectedProductId);
    }
}
